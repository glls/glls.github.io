<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development | George Litos</title>
    <link>https://georgelitos.com/tags/development/</link>
      <atom:link href="https://georgelitos.com/tags/development/index.xml" rel="self" type="application/rss+xml" />
    <description>Development</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sun, 17 Aug 2025 15:42:11 +0300</lastBuildDate>
    <image>
      <url>https://georgelitos.com/media/icon_hu_fb37dc6c584384a9.png</url>
      <title>Development</title>
      <link>https://georgelitos.com/tags/development/</link>
    </image>
    
    <item>
      <title>From Floppy Swaps to Cross-Platform Power: My Journey to Lazarus FPC ðŸš€</title>
      <link>https://georgelitos.com/post/lazarus/</link>
      <pubDate>Sun, 17 Aug 2025 15:42:11 +0300</pubDate>
      <guid>https://georgelitos.com/post/lazarus/</guid>
      <description>&lt;p&gt;Hey everyone! Today, I want to share a bit about my programming journey and introduce you to a fantastic, often overlooked tool that&amp;rsquo;s been a consistent companion through the years: &lt;a href=&#34;https://www.lazarus-ide.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lazarus Free Pascal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My story in coding began, like many in the late 80s and early 90s, with the legendary &lt;strong&gt;Turbo C&lt;/strong&gt;.  I remember the thrill of typing out code in that stark blue text-mode editor, and the satisfaction of seeing my C programs compile. But there was a challenge, especially with my trusty one-floppy 8088 PC, an &lt;strong&gt;Olivetti Prodest PC 1&lt;/strong&gt;. Compiling anything beyond the simplest applications meant a constant dance of swapping floppy disks â€“ one for the compiler, another for the libraries, then back again. It was a tedious, but character-building, experience!
















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Olivetti Prodest PC 1&#34; srcset=&#34;
               /post/lazarus/pc1_hu_4c1efd8cc3fa6443.webp 400w,
               /post/lazarus/pc1_hu_580e1c8485abe4e7.webp 760w,
               /post/lazarus/pc1_hu_5feaa3ebb2305ae1.webp 1200w&#34;
               src=&#34;https://georgelitos.com/post/lazarus/pc1_hu_4c1efd8cc3fa6443.webp&#34;
               width=&#34;591&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when I discovered &lt;strong&gt;Turbo Pascal&lt;/strong&gt;.  Its integrated development environment (IDE) was the same with Turbo C without the disk swapping! Everything I needed was right there. The speed and simplicity of Pascal, coupled with the seamless workflow, made it my go-to language. It felt like magic after the floppy shuffle of C.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Turbo C 2.01&#34; srcset=&#34;
               /post/lazarus/tc2_hu_fd89aab6ce8b4268.webp 400w,
               /post/lazarus/tc2_hu_79084dfa30ead128.webp 760w,
               /post/lazarus/tc2_hu_51cc566bee39d2d6.webp 1200w&#34;
               src=&#34;https://georgelitos.com/post/lazarus/tc2_hu_fd89aab6ce8b4268.webp&#34;
               width=&#34;648&#34;
               height=&#34;408&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Turbo Pascal 5.5&#34; srcset=&#34;
               /post/lazarus/tp55_hu_fdae864f924b992d.webp 400w,
               /post/lazarus/tp55_hu_7314a757ba8dc1c3.webp 760w,
               /post/lazarus/tp55_hu_70d844661605fc49.webp 1200w&#34;
               src=&#34;https://georgelitos.com/post/lazarus/tp55_hu_fdae864f924b992d.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Fast forward to the 2000s, and the Windows era. Borland continued to be a major player with &lt;strong&gt;Borland Delphi&lt;/strong&gt; and &lt;strong&gt;C++Builder&lt;/strong&gt;.   Delphi, with its visual component library (VCL) and rapid application development (RAD) capabilities, was a game-changer for Windows GUI programming. Building sophisticated applications with drag-and-drop ease was incredibly empowering. C++Builder offered a similar RAD experience for C++ developers, leveraging the same powerful VCL framework. These tools were at the forefront of Windows development for a long time.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Borland Delphi 7.0&#34; srcset=&#34;
               /post/lazarus/delphi7_hu_d9a1f8397a3a105.webp 400w,
               /post/lazarus/delphi7_hu_2267375b731544ec.webp 760w,
               /post/lazarus/delphi7_hu_c10732caa21425e0.webp 1200w&#34;
               src=&#34;https://georgelitos.com/post/lazarus/delphi7_hu_d9a1f8397a3a105.webp&#34;
               width=&#34;640&#34;
               height=&#34;480&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-resurgence-lazarus-fpc---a-modern-open-source-powerhouse&#34;&gt;The Resurgence: Lazarus FPC - A Modern Open-Source Powerhouse&lt;/h2&gt;
&lt;p&gt;Years passed, and while the Borland tools evolved under different ownership, I was thrilled to discover that the spirit of Turbo Pascal and Delphi lives on, stronger than ever, in &lt;strong&gt;Lazarus FPC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lazarus is an open-source, cross-platform IDE that uses the &lt;strong&gt;Free Pascal Compiler (FPC)&lt;/strong&gt;. It&amp;rsquo;s a testament to the enduring power and flexibility of the Pascal language and the RAD paradigm. What makes Lazarus truly remarkable is its commitment to being &lt;strong&gt;Free and Open-Source Software (FOSS)&lt;/strong&gt;, supported by a vibrant and dedicated community.
















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Lazarus IDE&#34; srcset=&#34;
               /post/lazarus/lazarus_hu_1713c2f796d7ecbc.webp 400w,
               /post/lazarus/lazarus_hu_5d46c97a4c994a61.webp 760w,
               /post/lazarus/lazarus_hu_68167d342356072a.webp 1200w&#34;
               src=&#34;https://georgelitos.com/post/lazarus/lazarus_hu_1713c2f796d7ecbc.webp&#34;
               width=&#34;760&#34;
               height=&#34;527&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;why-lazarus-fpc-is-a-big-deal&#34;&gt;Why Lazarus FPC is a Big Deal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delphi Compatibility:&lt;/strong&gt; If you&amp;rsquo;re coming from a Delphi background, Lazarus will feel incredibly familiar. It aims for high compatibility with Delphi&amp;rsquo;s Object Pascal dialect and its Visual Component Library (VCL), offering a similar component-based, drag-and-drop development experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Truly Cross-Platform:&lt;/strong&gt; This is where Lazarus shines! You can develop applications on one operating system and compile them for others with little to no code changes. This means you can create native applications for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows (32-bit and 64-bit)&lt;/li&gt;
&lt;li&gt;Linux (GTK, Qt)&lt;/li&gt;
&lt;li&gt;macOS&lt;/li&gt;
&lt;li&gt;And even some embedded systems like Raspberry Pi!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &amp;ldquo;write once, compile anywhere&amp;rdquo; philosophy saves an immense amount of time and effort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native Binaries:&lt;/strong&gt; Unlike some other cross-platform solutions that rely on virtual machines or runtimes, Lazarus compiles your code into native executables. This results in highly performant applications with a small footprint and no external dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rich Component Library (LCL):&lt;/strong&gt; The Lazarus Component Library (LCL) is extensive, providing a wide array of visual and non-visual components for building all sorts of applications, from simple utilities to complex database systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Active Community and FOSS:&lt;/strong&gt; Being open-source means Lazarus is constantly evolving, with bug fixes, new features, and a supportive community ready to help. It&amp;rsquo;s a refreshing contrast to proprietary tools where you might be at the mercy of a single vendor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;real-world-applications-built-with-lazarus-fpc&#34;&gt;Real-World Applications Built with Lazarus FPC&lt;/h3&gt;
&lt;p&gt;You might be surprised by some of the well-known applications that are built with Lazarus and Free Pascal. Here are just a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Double Commander:&lt;/strong&gt; A popular, open-source, cross-platform file manager with a dual-pane interface, similar to Total Commander. It&amp;rsquo;s a fantastic example of a robust application built entirely with Lazarus.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beyond Compare (macOS and Linux versions):&lt;/strong&gt; This widely used data comparison utility leverages Lazarus for its macOS and Linux editions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And many more! The list is constantly growing, check the wiki &lt;a href=&#34;https://wiki.freepascal.org/Projects_using_Free_Pascal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, showcasing the power and versatility of Lazarus FPC for various types of software.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;my-ongoing-journey&#34;&gt;My Ongoing Journey&lt;/h2&gt;
&lt;p&gt;From the floppy-swapping days of Turbo C and Turbo Pascal to the visual magic of Delphi and C++Builder, and now to the open-source, cross-platform power of Lazarus FPC, my journey in programming has been a continuous evolution.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re looking for a powerful, flexible, and free alternative for building native applications across different operating systems, I highly recommend giving Lazarus FPC a try. You might just find your new favorite development environment!&lt;/p&gt;
&lt;p&gt;Happy coding! âœ¨&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cc.embarcadero.com/Item/25636&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo C 2.01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cc.embarcadero.com/Item/26015&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo Pascal 5.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.computinghistory.org.uk/det/15452/Olivetti-PC1-Prodest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Olivetti Prodest PC 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://winworldpc.com/product/ms-dos/622&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MS-DOS 6.22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Borland&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia: Borland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://winworldpc.com/product/delphi/70&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borland Delphi 7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Free_Pascal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia: Free Pascal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lazarus_%28IDE%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia: Lazarus (IDE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Visual_Component_Library&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia: Visual Component Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Developer&#39;s Introduction to Unraid</title>
      <link>https://georgelitos.com/post/unraid/</link>
      <pubDate>Sun, 17 Aug 2025 14:49:36 +0300</pubDate>
      <guid>https://georgelitos.com/post/unraid/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://unraid.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unraid&lt;/a&gt; is a proprietary Linux-based operating system designed for &lt;strong&gt;home servers and small businesses&lt;/strong&gt;. It&amp;rsquo;s known for its unique storage management system, which provides flexibility and data protection. Developers often use Unraid to run a variety of services, including web servers, databases, and CI/CD tools, all on a single machine.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;key-features-for-developers&#34;&gt;Key Features for Developers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker and Virtualization:&lt;/strong&gt; Unraid has built-in support for running Docker containers and virtual machines. This is a major plus for developers, as it allows them to easily deploy and manage isolated application environments. You can run multiple services (e.g., a web server, a database, and a caching layer) in separate containers without them interfering with each other. This is especially useful for testing and production environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexible Storage:&lt;/strong&gt; Unraid&amp;rsquo;s most distinctive feature is its storage array. It combines drives of different sizes into a single, logical pool. This is unlike traditional RAID, which typically requires drives of the same size. Unraid uses a &lt;strong&gt;parity drive&lt;/strong&gt; (or two for more protection) to protect against a single (or two) drive failure. Data is written directly to individual drives, which makes it easy to add or remove drives without rebuilding the entire array. For developers, this means they can start with a small setup and expand storage as needed without downtime or complex migrations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plugin System and Community Apps:&lt;/strong&gt; Unraid has a robust plugin system and a &amp;ldquo;Community Apps&amp;rdquo; store. This allows developers to easily install and manage a wide range of applications, including many useful for development, like Gitlab, Plex, and various reverse proxies. This makes it easy to set up a comprehensive development and media server environment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it Works&lt;/h2&gt;
&lt;p&gt;Unraid separates its storage into a few key areas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Array:&lt;/strong&gt; The main storage pool for your data. Drives can be of different sizes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parity Drive(s):&lt;/strong&gt; These drives don&amp;rsquo;t store data directly but contain parity information that can be used to &lt;strong&gt;reconstruct a failed drive&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache Pool:&lt;/strong&gt; An optional, high-speed SSD-based cache. It&amp;rsquo;s often used to temporarily store data before it&amp;rsquo;s moved to the slower hard drives in the array. This significantly improves performance for applications that have frequent read/write operations. Developers can use this for their databases or other I/O-intensive services to speed things up.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;use-cases-for-developers&#34;&gt;Use Cases for Developers&lt;/h2&gt;
&lt;p&gt;Developers can use Unraid for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local Development Environment:&lt;/strong&gt; Host your code repositories, databases, and application servers in a single, controlled environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CI/CD Pipeline:&lt;/strong&gt; Run self-hosted runners for Gitlab CI, Jenkins, or other CI/CD platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media and Data Hoarding:&lt;/strong&gt; Use it as a personal media server with Plex or as a centralized backup destination for your projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker:&lt;/strong&gt; Leverage Docker containers for microservices, development environments, or isolated applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Machines:&lt;/strong&gt; Run various operating systems, like Windows or different Linux distributions, for testing or specialized development tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that you can even develop your own &lt;strong&gt;Community Applications&lt;/strong&gt; and share them with others, like I did, with the templates found at &lt;a href=&#34;https://github.com/glls/Docker-Templates-Unraid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/glls/Docker-Templates-Unraid&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
